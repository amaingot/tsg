service:
  name: tsg-api
  app: tsg

plugins:
  - serverless-dotenv-plugin
  - serverless-webpack
  - serverless-offline
  - serverless-stack-output

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${opt:stage, 'dev'}
  timeout: 15
  tracing:
    apiGateway: true
    lambda: true
  logs:
    restApi:
      level: INFO
      executionLogging: true
      fullExecutionData: true
    frameworkLambda: true
  individually: true
  memorySize: 128
  role: LambdaRole
  environment:
    AWS_XRAY_CONTEXT_MISSING: LOG_ERROR
    APP_HOST: ${self:custom.secrets.APP_HOST}
    CLIENT_TABLE: ${self:service.app}-ClientTable-${self:provider.stage}
    USER_TABLE: ${self:service.app}-UserTable-${self:provider.stage}
    CUSTOMER_TABLE: ${self:service.app}-CustomerTable-${self:provider.stage}
    JOB_TABLE: ${self:service.app}-JobTable-${self:provider.stage}
    MESSAGE_TABLE: ${self:service.app}-MessageTable-${self:provider.stage}
    NODE_PATH: "./:/opt/node_modules"
    ENV: ${self:provider.stage}
    LAMBDA_ROLLBAR_TOKEN: ${self:custom.secrets.LAMBDA_ROLLBAR_TOKEN}
    CODE_VERSION: ${env:CIRCLE_SHA1}
    USER_POOL_ID: { Ref: UserPool }
    USER_POOL_CLIENT_ID: { Ref: UserPoolClientServer }
    STRIPE_SECRET_KEY: ${self:custom.secrets.STRIPE_SECRET_KEY}
    LOG_LEVEL: debug
    TWILIO_PHONE_NUMBER: ${self:custom.secrets.TWILIO_PHONE_NUMBER}
    TWILIO_ACCOUNT_SID: ${self:custom.secrets.TWILIO_ACCOUNT_SID}
    TWILIO_AUTH_TOKEN: ${self:custom.secrets.TWILIO_AUTH_TOKEN}
    SENDGRID_API_KEY: ${self:custom.secrets.SENDGRID_API_KEY}

package:
  individually: true

custom:
  secrets: ${ssm:/aws/reference/secretsmanager/${self:provider.stage}/${self:service.app}~true}
  webpack:
    keepOutputDirectory: true
  serverless-offline:
    port: 3001
  corsConfig: &corsConfig
    origin: "https://${self:custom.secrets.APP_HOST}"
    allowCredentials: true
  authorizerConfig: &authorizerConfig
    type: COGNITO_USER_POOLS
    authorizerId:
      Ref: ApiGatewayAuthorizer
  output:
    file: ../env.json

layers:
  shared:
    path: layer
    name: ${self:service.app}-SharedLayer-${self:provider.stage}
    description: "Additional ${self:service.app} nodejs dependencies"
    compatibleRuntimes:
      - ${self:provider.runtime}

functions:
  signup:
    handler: handlers/onboarding/signup.default
    layers:
      - { Ref: SharedLambdaLayer }
    events:
      - http:
          method: post
          path: signup
          cors: *corsConfig

  signup-resend-code:
    handler: handlers/onboarding/resendCode.default
    layers:
      - { Ref: SharedLambdaLayer }
    events:
      - http:
          method: post
          path: signup/resend
          cors: *corsConfig

  signup-confirm:
    handler: handlers/onboarding/confirm.default
    layers:
      - { Ref: SharedLambdaLayer }
    events:
      - http:
          method: post
          path: signup/confirm
          cors: *corsConfig

  forgot-password:
    handler: handlers/user/forgotPassword.default
    layers:
      - { Ref: SharedLambdaLayer }
    events:
      - http:
          method: post
          path: user/forgot-password
          cors: *corsConfig

  reset-password:
    handler: handlers/user/resetPassword.default
    layers:
      - { Ref: SharedLambdaLayer }
    events:
      - http:
          method: post
          path: user/reset-password
          cors: *corsConfig

  accept-invitation:
    handler: handlers/user/acceptInvitation.default
    layers:
      - { Ref: SharedLambdaLayer }
    events:
      - http:
          method: post
          path: user/accept-invitation
          cors: *corsConfig

  client-me:
    handler: handlers/clients/me.default
    layers:
      - { Ref: SharedLambdaLayer }
    events:
      - http:
          method: get
          path: clients/me
          cors: *corsConfig
          authorizer: *authorizerConfig

  employee-list:
    handler: handlers/employees/list.default
    layers:
      - { Ref: SharedLambdaLayer }
    events:
      - http:
          method: get
          path: employees/list
          cors: *corsConfig
          authorizer: *authorizerConfig

  employee-create:
    handler: handlers/employees/create.default
    layers:
      - { Ref: SharedLambdaLayer }
    events:
      - http:
          method: post
          path: employees/create
          cors: *corsConfig
          authorizer: *authorizerConfig

  employee-update:
    handler: handlers/employees/update.default
    layers:
      - { Ref: SharedLambdaLayer }
    events:
      - http:
          method: post
          path: employees/{id}/update
          cors: *corsConfig
          authorizer: *authorizerConfig
          request:
            parameters:
              paths:
                id: true

  employee-detail:
    handler: handlers/employees/detail.default
    layers:
      - { Ref: SharedLambdaLayer }
    events:
      - http:
          method: get
          path: employees/{id}/detail
          cors: *corsConfig
          authorizer: *authorizerConfig
          request:
            parameters:
              paths:
                id: true

  customer-list:
    handler: handlers/customers/list.default
    layers:
      - { Ref: SharedLambdaLayer }
    events:
      - http:
          method: get
          path: customers/list
          cors: *corsConfig
          authorizer: *authorizerConfig

  customer-create:
    handler: handlers/customers/create.default
    layers:
      - { Ref: SharedLambdaLayer }
    events:
      - http:
          method: post
          path: customers/create
          cors: *corsConfig
          authorizer: *authorizerConfig

  customer-update:
    handler: handlers/customers/update.default
    layers:
      - { Ref: SharedLambdaLayer }
    events:
      - http:
          method: post
          path: customers/{id}/update
          cors: *corsConfig
          authorizer: *authorizerConfig
          request:
            parameters:
              paths:
                id: true

  customer-detail:
    handler: handlers/customers/detail.default
    layers:
      - { Ref: SharedLambdaLayer }
    events:
      - http:
          method: get
          path: customers/{id}/detail
          cors: *corsConfig
          authorizer: *authorizerConfig
          request:
            parameters:
              paths:
                id: true

  job-list:
    handler: handlers/jobs/list.default
    layers:
      - { Ref: SharedLambdaLayer }
    events:
      - http:
          method: get
          path: jobs/list
          cors: *corsConfig
          authorizer: *authorizerConfig

  job-count-breakdown:
    handler: handlers/jobs/count-breakdown.default
    layers:
      - { Ref: SharedLambdaLayer }
    events:
      - http:
          method: get
          path: jobs/count-breakdown
          cors: *corsConfig
          authorizer: *authorizerConfig

  job-list-pending:
    handler: handlers/jobs/list-pending.default
    layers:
      - { Ref: SharedLambdaLayer }
    events:
      - http:
          method: get
          path: jobs/list/pending
          cors: *corsConfig
          authorizer: *authorizerConfig

  job-create:
    handler: handlers/jobs/create.default
    layers:
      - { Ref: SharedLambdaLayer }
    events:
      - http:
          method: post
          path: jobs/create
          cors: *corsConfig
          authorizer: *authorizerConfig

  job-update:
    handler: handlers/jobs/update.default
    layers:
      - { Ref: SharedLambdaLayer }
    events:
      - http:
          method: post
          path: jobs/{id}/update
          cors: *corsConfig
          authorizer: *authorizerConfig
          request:
            parameters:
              paths:
                id: true

  job-finish:
    handler: handlers/jobs/finish.default
    layers:
      - { Ref: SharedLambdaLayer }
    events:
      - http:
          method: put
          path: jobs/{id}/finish
          cors: *corsConfig
          authorizer: *authorizerConfig
          request:
            parameters:
              paths:
                id: true

  job-detail:
    handler: handlers/jobs/detail.default
    layers:
      - { Ref: SharedLambdaLayer }
    events:
      - http:
          method: get
          path: jobs/{id}/detail
          cors: *corsConfig
          authorizer: *authorizerConfig
          request:
            parameters:
              paths:
                id: true

  sms-status:
    handler: handlers/sms/status.default
    layers:
      - { Ref: SharedLambdaLayer }
    events:
      - http:
          method: post
          path: sms/status
          cors: *corsConfig

  sms-incoming:
    handler: handlers/sms/incoming.default
    layers:
      - { Ref: SharedLambdaLayer }
    events:
      - http:
          method: post
          path: sms/incoming
          cors: *corsConfig

resources:
  Resources:
    UserPool: ${file(./resources/UserPool.yml)}
    UserPoolClient: ${file(./resources/UserPoolClient.yml)}
    UserPoolClientServer: ${file(./resources/UserPoolClientServer.yml)}
    ApiGatewayAuthorizer: ${file(./resources/ApiGatewayAuthorizer.yml)}
    GatewayResponseDefault4XX: ${file(./resources/GatewayResponseDefault4XX.yml)}
    DynamoDbClientTable: ${file(./resources/DynamoDbClientTable.yml)}
    DynamoDbUserTable: ${file(./resources/DynamoDbUserTable.yml)}
    DynamoDbCustomerTable: ${file(./resources/DynamoDbCustomerTable.yml)}
    DynamoDbJobTable: ${file(./resources/DynamoDbJobTable.yml)}
    DynamoDbMessageTable: ${file(./resources/DynamoDbMessageTable.yml)}
    LambdaRole: ${file(./resources/LambdaRole.yml)}

  Outputs:
    UserPoolClientId:
      Value:
        Ref: UserPoolClient
    UserPoolId:
      Value:
        Ref: UserPool
    Region:
      Value:
        Ref: "AWS::Region"
