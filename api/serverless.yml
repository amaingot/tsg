service:
  name: tsg-api
  app: tsg

plugins:
  - serverless-dotenv-plugin
  - serverless-webpack
  - serverless-offline

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${opt:stage, 'dev'}
  timeout: 15
  tracing:
    apiGateway: true
    lambda: true
  logs:
    restApi:
      level: INFO
      executionLogging: true
      fullExecutionData: true
    frameworkLambda: true
  individually: true
  memorySize: 128
  role: LambdaRole
  environment:
    AWS_XRAY_CONTEXT_MISSING: LOG_ERROR
    CLIENT_TABLE: ${self:service.app}-ClientTable-${self:provider.stage}
    USER_TABLE: ${self:service.app}-UserTable-${self:provider.stage}
    CUSTOMER_TABLE: ${self:service.app}-CustomerTable-${self:provider.stage}
    JOB_TABLE: ${self:service.app}-JobTable-${self:provider.stage}
    NODE_PATH: "./:/opt/node_modules"
    ENV: ${self:provider.stage}
    LAMBDA_ROLLBAR_TOKEN: ${env:LAMBDA_ROLLBAR_TOKEN}
    CODE_VERSION: ${env:CIRCLE_SHA1}
    USER_POOL_ID: { Ref: UserPool }
    USER_POOL_CLIENT_ID: { Ref: UserPoolClientServer }
    STRIPE_SECRET_KEY: ${env:STRIPE_SECRET_KEY}

package:
  individually: true

custom:
  serverless-offline:
    port: 3001
  corsConfig: &corsConfig
    origin: "*"
    allowCredentials: true
  authorizerConfig: &authorizerConfig
    type: COGNITO_USER_POOLS
    authorizerId:
      Ref: ApiGatewayAuthorizer

layers:
  shared:
    path: layer
    name: ${self:service.app}-SharedLayer-${self:provider.stage}
    description: "Additional ${self:service.app} nodejs dependencies"
    compatibleRuntimes:
      - ${self:provider.runtime}

functions:
  signup:
    handler: handlers/signUp.default
    layers:
      - { Ref: SharedLambdaLayer }
    events:
      - http:
          method: post
          path: signup
          cors: *corsConfig

  resend-confirm-code:
    handler: handlers/resendCode.default
    layers:
      - { Ref: SharedLambdaLayer }
    events:
      - http:
          method: post
          path: signup/resend
          cors: *corsConfig

  confirm-user:
    handler: handlers/confirmUser.default
    layers:
      - { Ref: SharedLambdaLayer }
    events:
      - http:
          method: post
          path: signup/confirm
          cors: *corsConfig

  get-customers:
    handler: handlers/getCustomers.default
    layers:
      - { Ref: SharedLambdaLayer }
    events:
      - http:
          method: get
          path: customers
          cors: *corsConfig
          authorizer: *authorizerConfig

resources:
  Resources:
    UserPool: ${file(./resources/UserPool.yml)}
    UserPoolClient: ${file(./resources/UserPoolClient.yml)}
    UserPoolClientServer: ${file(./resources/UserPoolClientServer.yml)}
    ApiGatewayAuthorizer: ${file(./resources/ApiGatewayAuthorizer.yml)}
    GatewayResponseDefault4XX: ${file(./resources/GatewayResponseDefault4XX.yml)}
    ClientTable: ${file(./resources/ClientTable.yml)}
    UserTable: ${file(./resources/UserTable.yml)}
    CustomerTable: ${file(./resources/CustomerTable.yml)}
    JobTable: ${file(./resources/JobTable.yml)}
    LambdaRole: ${file(./resources/LambdaRole.yml)}
