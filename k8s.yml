---
apiVersion: v1
kind: Namespace
metadata:
  name: tsg

---
apiVersion: v1
kind: Secret
metadata:
  name: tsg-secrets
  namespace: tsg
data:
  # FIREBASE_APP_CONFIG: AgCjzuaWQRPgMby9QwJGY3rH2qXLdt4yF4Z6fuzWr1C8vGpziDgh+CmGM6Aou4sc/H2uqNgldSDUHW0iJH5VRTQAXSP9xgICCP/E27hidMOfaqSobrF1tW5WCbBB9buQBjFSQMpbpsKTBUgqewfEfrlpv+MwSwc+YrYy+evopIkaR0qshx1OVfOrOyK270uQ8As2YWdrcFwUPe4vp6orC56u59JoYIiTTEwTyyNWXm0/ldj3/YFoZjXt3bcPNa1vIi7aP+hbH+NcKPEMSF2fVJHF0J+se3K+mwFOYTKK6ooKlCK2qvy+Qcbcvz8fKdyUpT+d8jyx9RZJ6vRFDgu2O8HikzP9r76/OQ36uxeekfzAdbS7fN+zgJh2m1qW2aI1p7KmzLLW+EUFBcryMwYCm9Nm95HapCcsrQJbaBhw7PS1IDcqq70X+QAqljlxwk9y6sgjpCB0n9/y980m9dI6aVf2QDtB2spURHOhuK+RfFm5Ib66al7yGIYFQ+tOCyh2BUZ3RtE9oVzTJC18KOB5EFYONSfT1ZRMu6gXsaSSxOxrrVk8lT1lf53yTH7PPZmGKP2Bosou0ROnGT8q1kbbHLwz8YmTYTcM5P5/XypGR1JW7R3LoawWqk4sUGW3eKFp4hA+4SUsSILicY0052+93BabZnbi1IdgASz3yXXheJSPXMaCwKRGcnh2BmeFcTalVMgZA3BqK9ieDk59Nlc0+YRkouch5qPMq2243h2ZUyFlTc5UutbNY2cC4/p9h82gHPVnYul0tO3lvUk0eXH9QcFvQGkd/mzOSADBLgC6ShWUdMhPI9O0Ob3NAOQrhW6wZXrndyww6QFCoqd6ilbvx+d1TExUtUzxqKsF62QC/M3qCnZwxx1/MLx62wRBxShxs8QqmlaRFTovpr32CvxBNrrnPprilEWH5tOZcgqax+ZTW+czaxkFj2jhP4szo0svVChti46ABxozpawmwdy2M1IBVb+m+GdmUqSuo9pBy4wWRwtuhLcgAeSKOlFYtCLrgKBOaTytxJu2OgcfifTWo3V7TFWngF3WOB2sJHsJmY2lFydpbp30dFQd+FpwijDa0NUCmWuD6cKz1ZqhCg==
  SENDGRID_API_KEY: U0cuYlZhMUhzWWxUMDZhdzd4WVJmOVVKZy5NMGhWa01NSmRoMU9LTDFQSm41X1RnOXRVMWZGUHlRZWRPT1dUc3NIYTY4
  STRIPE_PUBLIC_KEY: cGtfbGl2ZV93azAyVUcyeUllU0xYZGljd0JBVkR5ejkwMHZuNG82c2V3
  STRIPE_SECRET_KEY: c2tfbGl2ZV81MUdtaUc5R05BckV3cEZ4ZkpxbzZBemlFWXltZVU1cmVjWDhhVXBKYmNXZ1RZQU1CUGxCcHl5Uk00ekNFbm9XNzNBNG5wek9PTWo4ODFDcHpPSFlzQ3BsRzAwZjJ4VFRvU2I=
  TWILIO_ACCOUNT_SID: QUMxYWY4NGU5NGJkNGE0ZTgzMmVmMGEzMzI4N2EzMmI4MQ==
  TWILIO_AUTH_TOKEN: OTY5YzM0ZDZjZDFhODhlZmNhYmY2NzRmOWE4NWU3ZTg=
  TWILIO_PHONE_NUMBER: KzEgNjUwIDMwMCAwMDk2

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: tsg-config
  namespace: tsg
data:
  ENVIRONMENT: prod
  GCP_PROJECT_ID: hmm-dev
  GCP_IDP_TENANT_ID: tsguru-6prs8
  POSTGRES_DATABASE: tsg-prod
  POSTGRES_USERNAME: postgres
  POSTGRES_PASSWORD: supersecret

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: tsg-postgres
  namespace: tsg
spec:
  selector:
    matchLabels:
      app: tsg-postgres
  serviceName: tsg-postgres
  replicas: 1
  template:
    metadata:
      labels:
        app: tsg-postgres
    spec:
      terminationGracePeriodSeconds: 30
      containers:
        - name: tsg-postgres
          image: postgres:12-alpine
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                configMapKeyRef:
                  name: tsg-config
                  key: POSTGRES_PASSWORD
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: tsg-config
                  key: POSTGRES_DATABASE
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata/tsg_pgdata
          volumeMounts:
            - name: pgdata
              mountPath: /var/lib/postgresql/data/pgdata
  volumeClaimTemplates:
    - metadata:
        name: pgdata
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 10Gi

---
apiVersion: v1
kind: Service
metadata:
  name: tsg-postgres
  namespace: tsg
spec:
  ports:
    - port: 5432
      targetPort: 5432
      protocol: TCP
  selector:
    app: tsg-postgres

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: tsg
  namespace: tsg
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: tsg
  template:
    metadata:
      labels:
        app: tsg
    spec:
      containers:
        - name: tsg
          image: gcr.io/hmm-dev/tsg:a0223d2aebe5be5dc11ab5634c589c22ad4b8900
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          resources:
            limits:
              memory: "512Mi"
              cpu: "0.5"
          envFrom:
            - configMapRef:
                name: tsg-config
            - secretRef:
                name: tsg-secrets

          # readinessProbe:
          #   httpGet:
          #     path: /_health/ready
          #     port: 8080
          #     scheme: HTTP
          #   initialDelaySeconds: 15
          #   periodSeconds: 30
          #   timeoutSeconds: 15

          # livenessProbe:
          #   httpGet:
          #     path: /_health/alive
          #     port: 8080
          #     scheme: HTTP
          #   initialDelaySeconds: 30
          #   periodSeconds: 15
          #   timeoutSeconds: 5

          env:
            - name: POSTGRES_HOST
              value: tsg-postgres
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: "/config/credentials.json"
          volumeMounts:
            - name: gcp-key
              mountPath: "/config"
              readOnly: true
      volumes:
        - name: gcp-key
          secret:
            secretName: tsg-gcp-key

---
apiVersion: v1
kind: Service
metadata:
  name: tsg-service
  namespace: tsg
  labels:
    name: tsg
spec:
  ports:
    - port: 8080
  selector:
    app: tsg

---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: tsg-ingress
  namespace: tsg
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt
spec:
  tls:
    - hosts:
        - "tsg.hmm.dev"
      secretName: tsg-cert-secret
  rules:
    - host: "tsg.hmm.dev"
      http:
        paths:
          - path: /
            backend:
              serviceName: tsg-service
              servicePort: 8080
