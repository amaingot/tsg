"Date time represented as an ISO String"
scalar DateTime
scalar Email
scalar PhoneNumber

type Product {
  id: ID!
  active: Boolean!
  created: DateTime!
  description: String
  images: [String!]!
  livemode: Boolean!
  name: String!
  statementDescriptor: String
  type: String
  unitLabel: String
  updated: DateTime!
}

type Plan {
  id: ID!
  active: Boolean!
  amount: Int!
  amountDecimal: String!
  billingScheme: String!
  created: DateTime!
  currency: String!
  interval: String!
  intervalCount: Int!
  livemode: Boolean!
  nickname: String
  productId: ID
  product: Product
  trialPeriodDays: Int
  usageType: String!
  features: [String!]!
  description: String!
}

enum UserRole {
  SuperAdmin
  AccountAdmin
  Employee
}

type Account {
  id: ID!
  name: String!
  stripeCustomerId: String!
  updatedAt: DateTime!
  createdAt: DateTime!

  employees(input: PaginationInput): Employees!
  accounts(input: PaginationInput): Accounts!
  jobs(input: PaginationInput): Jobs!
  customers(input: PaginationInput): Customers!
}

type Customer {
  id: ID!
  accountId: ID!
  memNum: String
  firstName: String
  lastName: String
  middleInitial: String
  email: Email
  address: String
  address2: String
  city: String
  zip: String
  homePhone: String
  cellPhone: String
  workPhone: String
  updatedAt: DateTime!
  createdAt: DateTime!

  account: Account!
  jobs(input: PaginationInput): Jobs!
}

type Job {
  id: ID!
  customerId: String!
  accountId: ID!
  finished: Boolean!
  updatedAt: DateTime!
  createdAt: DateTime!
  name: String
  stringName: String
  racket: String
  tension: String
  gauge: String
  recievedAt: DateTime
  finishedAt: DateTime
  finishedByEmployeeId: ID

  finishedByEmployee: Employee
  customer: Customer!
  account: Account!
}

type Employee {
  id: ID!
  accountId: ID!
  firstName: String!
  lastName: String!
  email: String!
  cellPhone: String
  userRole: UserRole!
  updatedAt: DateTime!
  createdAt: DateTime!

  account: Account!
  jobsFinished(input: PaginationInput): Jobs!
}

type CursorResponse {
  beforeCursor: String
  afterCursor: String
}

enum CursorType {
  AFTER
  BEFORE
}

input CursorInput {
  cursor: String!
  type: CursorType!
}

enum PaginationOrder {
  ASC
  DESC
}

input PaginationInput {
  limit: Int
  cursor: CursorInput
  order: PaginationOrder
}

type Employees {
  data: [Employee!]!
  cursor: CursorResponse!
}

type Accounts {
  data: [Account!]!
  cursor: CursorResponse!
}

type Jobs {
  data: [Job!]!
  cursor: CursorResponse!
}

type Customers {
  data: [Customer!]!
  cursor: CursorResponse!
}

type Query {
  me: Employee
  employees(input: PaginationInput): Employees!
  employee(id: ID!): Employee

  accounts(input: PaginationInput): Accounts!
  account(id: ID!): Account

  jobs(input: PaginationInput): Jobs!
  job(id: ID!): Job

  customers(input: PaginationInput): Customers!
  customer(id: ID!): Customer

  # Public
  plans: [Plan!]!
}

input CreateOrUpdateAccountInput {
  name: String!
  stripeCustomerId: String!
}

input CreateOrUpdateEmployeeInput {
  accountId: ID!
  firstName: String!
  lastName: String!
  email: String!
  cellPhone: String
  userRole: UserRole!
}

input CreateOrUpdateCustomerInput {
  accountId: ID!
  memNum: String
  firstName: String
  lastName: String
  middleInitial: String
  email: Email
  address: String
  address2: String
  city: String
  zip: String
  cellPhone: String
  homePhone: String
  workPhone: String
}

input CreateOrUpdateJobInput {
  accountId: ID!
  customerId: ID!
  finished: Boolean!
  name: String
  stringName: String
  racket: String
  tension: String
  gauge: String
  recievedAt: DateTime
  finishedAt: DateTime
  finishedByEmployeeId: ID
}

input SignUpInput {
  firstName: String!
  companyName: String!
  lastName: String!
  email: String!
  password: String!
  paymentMethodId: String
}

type Mutation {
  signUp(input: SignUpInput!): Account!
  forgotPassword(email: Email!): String!
  resetPassword: String!
  acceptInvitation: Employee!

  createAccount(input: CreateOrUpdateAccountInput!): Account!
  updateAccount(id: ID!, input: CreateOrUpdateAccountInput!): Account!
  deleteAccount(id: ID!): Boolean!

  createEmployee(input: CreateOrUpdateEmployeeInput!): Employee!
  updateEmployee(id: ID!, input: CreateOrUpdateEmployeeInput!): Employee!
  deleteEmployee(id: ID!): Boolean!

  createCustomer(input: CreateOrUpdateCustomerInput!): Customer!
  updateCustomer(id: ID!, input: CreateOrUpdateCustomerInput!): Customer!
  deleteCustomer(id: ID!): Boolean!

  createJob(input: CreateOrUpdateJobInput!): Job!
  updateJob(id: ID!, input: CreateOrUpdateJobInput!): Job!
  finishJob(id: ID!): Job!
  restartJob(id: ID!): Job!
  deleteJob(id: ID!): Boolean!
}

type TextMessageEvent {
  id: ID!
}

type Subscription {
  onTextMessageEvent: TextMessageEvent!
}
